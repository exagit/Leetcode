Problem Statement:
1. Must Have Tasks :
    There should be a queue, that can receive the message from the producer, and send the message to the consumer.
    Queue is bounded in size and completely held in-memory. Size should be configurable.
    Queue should only hold JSON messages.
    Queue will have at least one producer and multiple consumers.
    Consumers register callbacks that will be invoked whenever there is a new message
    Allow subscription of consumers to messages that match a particular expression
    Consumers might have dependency relationships between them.
    For ex :
    if there are three consumers A, B and C. One dependency relationship can be that C cannot consume a particular message before A and B have consumed it.
    C -> (A,B) (-> means must process after).
    Handle concurrent writes and reads consistently between producer and consumers.

2. Bonus Tasks :
    Provide retry mechanisms to handle failures in message processing. It could be failure in publishing or consumption.
    Handle the message TTL. means the message could be expired after some time T. if a message is expired, it should not be delivered to the consumer.


Approach:
Entities:
  Queue implements Runnable{
    BlockingQueue<size> queue;
    Map<Consumer, Filter> consumers;
    Map<ParentConsumer, List<DependentConsumer>> consumderDependencies;
    Callbackhandler callbackHandler;

    subscribe(consumerId, callback, filter, dependencies){
        callbackHandler.add(consumerId, callback, filter);
    }

    void publish(message){
        this.queue.offer(message);
    }

    private run(){
        while(message = this.queue.next()){
            const dispatcher = new OrderedDispatcher(callbackHandler, ttlHandler, consumderDependencies);
            dispatcher.sendMessage(message);
        }
    }
  }

  OrderedDispatcher{
    constructor(callbackHandler, ttlHandler, consumerDependencies){
        super(callbackHandler, ttlHandler);
        outDegree = initOutDegree(consumderDependencies);
        queue = [];
        for each consumerKey in outDegree:
            if outDegree[consumerKey] == 0:
                queue.add(consumerKey);
    }
            
    hasMoreConsumers(){
        return !q.isEmpty();
    }

    nextConsumer(){
        consumer = q.poll();
        for(each dependency of dependenciesMap[consumer]){
            outDegree[dependency]--;
            if(outDegree[dependency]==0){
                q.add(dependency);
            }
        }
        return consumer;
    }

    Dispatcher{
        constructor(callbackHandler, ttlHandler){
            this.callbackHandler = callbackHandler;
            this.ttlHandler = ttlHandler;
        }

        sendMessage(){
            while(this.hasMoreConsumers()){
                consumer = this.nextConsumer();
                if(ttlHandler.ismessageValid(message)){
                    callbackHandler.callback(consumer, message);
                }
            }
        }
        nextConsumer(){

        }
    }
    public static void main(string args[]){
        new Thread(new Queue()).start();
    }


  }

  Message{
    jsonData;
  }

  Producer{
    queue;
    run()
  }

  Consumer{
    callback()
  }


B->A
 ^ ^
  \|
   C